# -*- coding: utf-8 -*-
"""Hopfield Network implementation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10EUlFfTQIQ9Gat8rvuCB2sdLxQv2_tFs
"""

!pip install neupy
from neupy import algorithms

import numpy as np
import matplotlib.pyplot as plt
from neupy import algorithms
import random as random


clear_img_sync = np.ndarray(shape=(8,120)).astype(int)
corrupted_img_sync = np.ndarray(shape=(8,120)).astype(int)

clear_img_Async = np.ndarray(shape=(8,120)).astype(int)
corrupted_img_Async = np.ndarray(shape=(8,120)).astype(int)



#clear_patterns
         
zero = np.matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                  0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                  0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
                  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
                  0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  ])

one = np.matrix([0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
                 ])

two = np.matrix([1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
                 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
                 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
                 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
                 ])


three = np.matrix([0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
                   0, 0, 1, 1, 1, 1, 1 ,1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
                   0, 0, 0, 0, 1, 1, 1, 1 ,0, 0, 
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 1, 1, 1, 1, 1 ,1, 1, 0,
                   0, 0, 1, 1, 1, 1, 1, 1, 0, 0,
                   ])

four = np.matrix ([0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                   0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                   0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                   0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                   0, 1, 1, 0, 0, 0, 0, 1, 1, 0,
                   0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
                   0, 1, 1, 1, 1, 1, 1, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
                   0, 0, 0, 0, 0, 0, 0, 1, 1, 0,])



six = np.matrix([1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
                 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
                 1, 1, 0, 0, 1, 1, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                 ])


dot = np.matrix([1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,])



nine = np.matrix([0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                  0, 0, 0, 0, 1, 1, 0, 0, 1, 1,
                  0, 0, 0, 0, 1, 1, 0, 0, 1, 1,
                  0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 
                  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                  0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                  0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                  0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
                  0, 0, 0, 0, 1, 1, 1, 1, 1, 1,

 ])



img_clear = np.concatenate([zero, one, two, three, four, six, dot, nine], axis=0)

   
columns = 4
rows=2
    
Figure1 = plt.figure(figsize=(12, 10))
for i in range(1, columns*rows +1):
    img1 = img_clear[i-1 , : ].reshape(12,10)
    ax1 = Figure1.add_subplot(rows, columns, i)
    u = i-1
    if(i==6):
        u=6
    if(i==7):
        u=8
    if(i==8):
        u=9
    ax1.title.set_text('Pattern %i'%u)
    plt.imshow(img1)
Figure1.suptitle('Input Patterns')
plt.show()

#Corrupted pattern

img_corrupted = np.concatenate([zero, one, two, three, four, six, dot, nine], axis=0)
for i in range(8):
    k = random.sample(range(0, 120), 40)
    k = np.asarray(k)   
    for j in range(30):
        if(img_corrupted[i , k[j]] == 1):
            img_corrupted[i,k[j]] = 0
        else:
            img_corrupted[i,k[j]] = 1



Figure2=plt.figure(figsize=(12, 10))
for i in range(1, columns*rows +1):
    img2 = img_corrupted[i-1 , : ].reshape(12,10)
    ax2 = Figure2.add_subplot(rows, columns, i)
    u = i-1
    if(i==6):
        u=6
    if(i==7):
        u=8
    if(i==8):
        u=9
    ax2.title.set_text('Pattern %i '%u)
    plt.imshow(img2)
Figure2.suptitle('Noisy Patterns')
plt.show()

sync_hop = algorithms.DiscreteHopfieldNetwork(mode='sync')
sync_hop.train(img_clear)

# prediction synch of clear pattern
for i in range(8):
       clear_img_sync[i , : ] = sync_hop.predict(img_clear[i , : ])

fig3=plt.figure(figsize=(12, 10)) 
for t in range(1, columns*rows +1):
    img3 = clear_img_sync[t-1 , : ].reshape(12,10)
    ax3 = fig3.add_subplot(rows, columns, t)
    u = t-1
    if(t==6):
        u=6
    if(t==7):
        u=8
    if(t==8):
        u=9
    ax3.title.set_text('pattern %i'%u)
    plt.imshow(img3)
fig3.suptitle('Performance of synchronous mode with clear patterns')
plt.show()

# prediction synch of corrupted pattern
for i in range(8):
       corrupted_img_sync[i , : ] = sync_hop.predict(img_corrupted[i , : ])
       
fig4=plt.figure(figsize=(12, 10))

for t in range(1, columns*rows +1):
    img4 = corrupted_img_sync[t-1 , : ].reshape(12,10)
    fig4.add_subplot(rows, columns, t)
    ax3 = fig4.add_subplot(rows, columns, t)
    u = t-1
    if(t==6):
        u=6
    if(t==7):
        u=8
    if(t==8):
        u=9
    ax3.title.set_text('pattern %i'%u)
    plt.imshow(img4)
fig4.suptitle('Performance of synchronous mode with noisy patterns')
plt.show()

#asychronous mode
Asynch_hop = algorithms.DiscreteHopfieldNetwork(mode='async',n_times = 1000)
Asynch_hop.train(img_clear)

# prediction of asynch mode for clear pattern

for i in range(8):
       clear_img_Async[i , : ] = Asynch_hop.predict(img_clear[i , : ])
 

fig5=plt.figure(figsize=(12, 10)) 
for t in range(1, columns*rows +1):
    img5 = clear_img_Async[t-1 , : ].reshape(12,10)
    ax5 =fig5.add_subplot(rows, columns, t)
    u = t-1
    if(t==6):
        u=6
    if(t==7):
        u=8
    if(t==8):
        u=9
    ax5.title.set_text('pattern %i'%u)
    plt.imshow(img5)
fig5.suptitle('Performance of Asynchronous mode with clear patterns')
plt.show()

#prediction of asynch mode for noisy pattern

for i in range(8):
       corrupted_img_Async[i , : ] = Asynch_hop.predict(img_corrupted[i , : ])

fig6=plt.figure(figsize=(12, 10)) 
for t in range(1, columns*rows +1):
    img6 = corrupted_img_Async[t-1 , : ].reshape(12,10)
    ax6 = fig6.add_subplot(rows, columns, t)
    u = t-1
    if(t==6):
        u=6
    if(t==7):
        u=8
    if(t==8):
        u=9
    ax6.title.set_text('pattern %i'%u)
    plt.imshow(img6)
fig6.suptitle('Performance of Asynchronous mode with noisy patterns')
plt.show()

for i in range(8):
    a= Asynch_hop.energy(img_clear[i, : ])
    b = Asynch_hop.energy(img_corrupted[i, : ])
    c = Asynch_hop.energy(clear_img_Async[i, : ])
    d = Asynch_hop.energy(corrupted_img_Async[i, : ])
    print(a,b,c,d)

"""Synch"""

for i in range(8):
    a= Asynch_hop.energy(img_clear[i, : ])
    b = Asynch_hop.energy(img_corrupted[i, : ])
    c = Asynch_hop.energy(clear_img_sync[i, : ])
    d = Asynch_hop.energy(corrupted_img_sync[i, : ])
    print(a,b,c,d)